#酒馆签到
#export dadaming_nwjg=你的wxid
#获取方式群公告8256端口的网址 
import sys
import zlib
import base64
import marshal
import hashlib
from itertools import cycle


from itertools import cycle

def custom_decode(data, salt='wFxp9TOcJ6ptO0HE', magic=3616):
    result = bytearray()
    for b, salt_char in zip(data, cycle(salt.encode())):
        result.append((b - salt_char - magic) % 256)
    return bytes(result)


def decrypt(data='4?rymv_M*0-!zXi;x+^xT$$@v0S9$aGH96{Ay$lv>5AZbr~X3_B&f1wx$>~DJC1_Vs*AxI25RF-n4&0d^YW9%Ue1!p$TCN$*Dqt8s)9IHXpEOr0XkjOzwlVNj0GY0=TRfXlgPaR-ToaTOkH|v^vrH%SmSezPC_UCbuRx0QxWY#BB@SxW*TMCm8ubf^RvVuRHYpIX`@S$l>dqRQ_${iJ-u27Y)KE?Ve!8QA5SK3FQxttZA{Zz)*n|zNApBIDZhDeG_GV?`U#1ErOT{%OaJ|hejmjsav$S;BIB?AWL|v`l22qV{@s6zC}V9gO)cG$I(J4m24I#|>|HDYX+LXn$}dEqmTW{~HgkG+cSa)`<xlP+t{uaPVIb<JX;4lMVmoeAg#{FkcvDZ}ScTtWzD`h1kVF&HKLZVcBq(rtOF!g7vLY7;fKlxE>D7l@&`mi-6p0RxN$Ak8%_Xif>r$sd@^z1T9Iqx6grf{&N4^I_JEWF~JPR)W1vCmmB<#)OkaX3<?>gXc(Aa;m#y+r|%RToC_(b{`5QIi8z7AI8vp&TQd~;edSX6p~R4spmAsvg))3Z!}uRa&EY@lXVeMP^|P;=aANxM#v>@+>xXO-8|817S0UB#{yHtwdO&ir!PkdjUPcS3Qo(h1vf?pq{itZU$*Mx8i<YTu3oRcti_*k3iGNYRrwYCS^&UQJGPd>#h+sZoG$4h>@rhGb!jnC@;UT1kh}>myj?h-HKSSR1Z;In@A<YBldiLV*?E)oBfTFNtB1Pj(d|uzzO`Znh+TK_?9pC?f~Kg<C%-fa5(;W>hO=XG}3fw#Zk`@Dr|pWqbaEJ_F}ldjYY}m?h56BXtOa>vIbvj8QU=LNR7xg?=xSPEuf3YhidDNisBHxy0^}XeS22HQ%>Q`diu#QN2$!R()5X2BMEeMrX=`F@b?l5KaSBbwfQEU-<W}E+C<HvF>ldfd;hprgj!fzke=x)+>I`&hfHAmpEvA5(bj4wc(vxgx*RoOrt5y<ok-a1Hq1~70hUzfkMaUCa*2nR?1$XzbMlr+ZoHYl`Pg9<D9Z75@<HQJ#P|I54g$voDK!j+uSt4RB#C^Oe<9R#%peTS3CXyzSvq59)9QhY&@{7qNIHGYf%GQ@aN$HFxBC#EP!9sCQN*0k~3d|SJ<de_)W5VVK=P1K2D|}%*)jVdb6Xo|8>v9MVm8FezxgWJx@wu8roa?i_$~xUH3i5%*0e)w72OvcUBN`7Wh!#d>iRG$iRh@2maRf>Wp)7EGao5cN?Pin2}w=e9NurCRe`pr{SvE2rY`X&E#ys|J%#`C3)u|prSgi48rl+!AQGv+cB>%xCo#FGa_x!&^TfOMyhcAq11&U3&N1wfZWbz;cB68=Iv|BHX@ko-&saM1j2cEE{~?3W1@|&3tpPA<$T`@jw}`8cQOz-*H32GOLP-sPaf{g<-DZAP*2o+Kt?JdYmrHAkE4&@+v#HJQ=-gb0{>2Kg{R|l8lc5TzPp~Bh$XmJHT7-qUR1izYJVJv+ZLm${$vyKH=Dl7MBXMqCt9sT$GzUkcb2MmPSN3|v(VAa^Jpm&A5Ho^jKU62x`iQ1R~Za;WKKO~d!<NB6XAAER=!q2@emQR@5)jE#TH6TR3*-=o)gF{4(A2#mvY$qiQF;aNexRg(n;NM{Bo6^s=S>{6o)x{gWE?HOdPQow7k-ECMw{IiBTx|6LX>C%%isIP=jj(rgw-@8_ZvLFEz#}H`=vl$$>O}{Z5g6wZm^G177k3&))f+eOUV8{aKR^{2wdWh5@6=i6G0oMk)jLY!8LDE$Jy4MemR_iESyQsAs+I?QpQQ-94~dam^Qp{UiQNJE%dWH2O=#UIw>qps(p@$5?e#$HsVS`@*4+E21<gsUjd`A4eDg{AL5u{P&!R*TkClAoE7UvZIT;3<wexuL&}pYBQ!KcEzA4z?+&V$lH3k9+Jy;9njt{sF>6u3X#w!d4R*zF)>v|^W6h*@<vfh7%railAV4?#SAUkC@N|l*M%MES?D<ccPrlCnIG9R+{GMx>X4N{^N;DTGVR$|tYk@Un~y66r+9QC)|!gmcH}ETk)Kq!yb1<sGNlf&RI}>pIwhLWc*8G#u*vfYp<>;Ffeg8wxQUg(88?a*_RUHc*eFv>5}!zt2C4#hgmidi-w^(@lPIsLt@$FTUl!?*1eu#{KDIrsp;?{fUkX7<!}%^T0BZ9a@Eldcvw~&JWMW1B4u8C6s+61cA$9_O)XBl{D|ubywin4&dRQgp84U6DY%39O5WRT|n@&)C(9Mg#hz#rOk;L>fCIUlJNQ$@a<kzLsf>?7%MYFMU&kKrX-TL!t=>@n!GRqcQ%{iiYhi4tP^T{6C)pdDRblzZV$7+*jrnT@zlp+_L*%Iwvkt=5X(;KqtLwH^AY<xSvn1<QRCp}2%{9O`J1*yV*naYHd@u3psOs+m}RRR2et&_Grq)A{C^)HFOLjPaylyiC>gn6Wz{os9YpYv2a;S3%!FHpPBG<m}3F)Cs9F-OTmcFTRfni}^sO|e0duKai)nc6kS{r7<=xEAnHb?&L^938@tpO4>r8amY6Koay(@xDxmHzLzi`<?2~MCMH@cO6r{7~HE2mbORt+JiTPq|l2i-d|I-2!vDb2V9kE!=*~b<ueq%l&@G#J=+|!BIOmjgxc+{VO7*~t{y7rLMbEv3;z@GE%F%HAKg9P>z`X4f|-3+%7?j_YQITu`dR?_jWJ-i^P$D50at89JBctvuq@+=`Ze*#r5d@TtKVu<*LRUEFtB@*-Mk$G!q`0MI$^Qv@<!<a>V8ZSTQ>dD+X3v%-y6Nxw?SVymBp#*+@t4uFZmvKIWT@y?HyF{90Avr?xP8|I#E)S5-HXn$ixF_^1@oLSN#y%=;rNBkp<IY%4_@1ATXIZJ2oa(uCXH3AZ#+RAXpkbTt3NCu^#B<2{BJ744X8zAVR3xoe%Rqn`FXwto5PQ|Ln_$0B9+^JhF_&M&dj6pL8X+^G@{bUmDQKSS(M#zP#D#04?}L%r*0B{;n?RTZXFsQDF7s$Ra}VCGFK&Ch7i9^|z+~zf;Y-Ao3%9Hxh7gw*n{uHDk*r9~{b~KRAgjNStD5cM@5A%D*w6xd|<~1p?~_|1&rf<o?76qG%~5T(B7hgq9k8`=IL<1nznTwV(SHUN;H4jU3*ZLq_mvw5Q(3oAF&APzcx-M)H1fO{0VGgGS0p^U!8DcltJLNUDXcxO!Gjm6q=)%4R_?aJ$+m*<|u_6LWY2hR3c{ExuOtSV@laTv*vn6Rt8|Lk!XiyTOLHS{TZKS~4S!dRm~rJT?gu##{BUQayoCII^`eQTlqFUv-m?`49>O;;|wOn_?pIB3Ii2`-{GIPs$v#K|S^V1^n^Pn-1XI6fG<Y$cy#f(*#pi1j=pi9`}gJrmNe+`!RSua(ERwWt15i87r|)jRbRkfp&2!x2z-gAC<9($8F~`8@!H}ElI{dSxZiv6d(Ks_Ti=ayX1WU&N7kYt{PbW#~Y-PjG+}3cVJ34#GEzEhYDAnMBp6|kMV&T&=m|VJ+j;5o2MzYZ0O5U{(AZ5Rp|cG8%K4x2pvN^2>RDqD#nZLD#mJJgJPwH$vTK=>&QAT^*>^Ltpgx$>u^p@$?7evz2Cbces__?^L&%3)w=^boZl#oZ!3@D*LM?Po52n3r@%8LeeoH1Kt@g0zSx+lL_MbC@0pe8EpgssG-+yK4-wnS1fa80Gzsw$P)F79h6NI3gAWm4h}OCnU|rlmn;=E&3l;>>{agTp%bz(9@_a3_l!9%7geyG`uueuWE3P!Cs^qpH?{?N+&U=LzT$KCgSj7=Wi3vkPAs;<G*ZV%}(0U8zBuXE?G=|bE<dUjE1O;y_Fu<-$4|p`IWoS|HK*h^vvc3yI01&YxwafKjw*g9z!}2Xr_j&VEqBe_%wJuG8E1>Vz_03W^NWPc=BDb^<^;rON@l#=$q&bGiBM`Z@`olGPg`}!_K2Y`zJzly$Ee>ez5;q)qrCl-Ka!2An?o-*h&>_A&vw=QDGX<j@OMV*YUqAd*klM6+U*-DIyTm2^PJSk%<Z5|Kyz&8(EKSqNEFlJ7NFr{b{da-sFyz`R+OZ_mjYizPI7S}qMK<a~cJiR|4l*JkA6O{=CGBjZYw1VNpgcIa`T3EgacNw#VNRS$*dam*9KI`1ydgfoI+hG(3zYPFnODHn?;Di3%ypo;Ps6%rHgq1pMITzVe=ge#b*p2^{G2=6`yJb#^HAiC)EvZ+BPSO5J+Sk#h9p7U7@Pbg)%HG#u?WlQ8h<*xjf|QblXB=lj}Jx#(AO19F(@GtsXgyr?@@%tf|a2$ObaDUPQP|+4}vam<c?VUET0|QRU=CI?BRnDAu35ouFZTPssj47^?Y+v0r^u^uB_(fD7Z$6s#@-pvq}ib63VAtBrIkX*(q2EwTz|nTo9@a!RLbASjTL8qu1}1ch0gfs|fz3ai(qiI$?O19{htBb7YZIYgJnpY`deFftzBt$rFQD2Z>)B>Nb_vuSZr^^kD-+3)EX1K%20+uC-P)bm@t;a`z|&I-;8V$o`+!RO;8kJXC$!P2Y_jTyipJyB4~d2q1v1V-eKkJANlu2m!NL>f_M%r%eeSg07frR{wU98=hKxG-diLK!}DucO<WnOw>(6tXs)Dm*{zCw~JJMt}>fyDNw~L52pr7k3Q{E(aOHbpg246<qp4m<cp-y97$acsa}z>$p@y!R&#|l2wLiGf=_|DD@_%Dgs8wBQCzzew%sF0Mfj)J0?wZS*tR2WbskE;yhG~Ukcl*EnF`2592MkFHuy^#2X3P$TiFko2t<X-37ls6<Q~#Stv_SBTAP)~w_OX(S~TD9`FYY%9yTx9MQ=?C4`}DbIT`L1Gx#X`lb9EAe1*V^&K$)38yTTpm8JN*h$%1*Sh|14Du)*zzyDS6@)m?EEh}tH7lX2VNP<aq+>SvyA=|Mus-6k?!7<_>Th$`D^Lyj-0m>PXyl3lP<)-h!)q~m<?wH0=n<d_fKein|@0ZlFOkC9YD4v|OG!@Y;Q}*im-1NflqDuw}Loc5#$QycWu?!njA%)L6lKc_Hy(kk$>QE+5uLf$dCpFe^?#*9Q6F7{l+ZaWMffEd&HS8alZKj8^y8Os?R9C_zHfzFQ2@5cLw1k&F41h+Uq8NJZAFZz3M+Nb@&DInaeT!SwW>6<eA|keI{M?;Yh=`kX6h&wE<dZHR^cJQ?UP-`IvRT?Ts2Wz1>3;o3V$a4zF%%M;B7i-Q>YVsJd=Fd^sZ-xa;t0sY8*mZJMc8j%sbF4Yu(4iS+PtE~`~1=-u_pLy`oR3V_E;BbT-KJNCo3bwsW)kjjHFBAMyCK*NfyE!MZM}o6OMIwbRe-AE>1L{KVg6%7NddKZ=Y>Oit>ozkXG{}op#pt3?JkKpTji(>EGw8yE5$PFelNi>aK4Oo5(l7&$L-_{0)Tc^M_*G9HHlQFB~BvMUVP70mZN}8)<ZoXwu`;J+_cU#5?hQ5(R~Tw<8LwKG}23E9J4%k=9GqhFRQbiF(2*1nKvxw+c<>1y`8=_RBF&90c_6@kP)Ljjl>Q)q5aW#|xLG7bil^5!N5=<FCY~y)6W5{&`)gA65dElpf`y3ikyppLk0l%R0@=pfW6yYbA$Wt0xZbf^qtc>)`7Y-aHQ%anU91Ohp#SeoDn=3;6c3s{h33soBd=6WAX&v!Qb@D=NOOopBS*<^(>K(~=C^9pnHkjm_B^9(*G5NE)(5yuA^=s(1u?Sr3wKePHjbBtD_KkPX4t^58(^$cNFezk=}168oK-?T<fL6%{5_kBZ#*`+GvODN@PQd3#|;O&*502|eNTV2OD+3t|9Ueh+<W{?dbJS*ggRP4#-<)TGj3)p7(yx|ml38%`VBcDPg7BR1&yvv9Ft!L=v3u{V+FDz)%10|%SPcK=(A2hLTa6R1n~X@NC!yB<)-D}gcZTi7kUPzFcVh$%fS^=sPROFxpc#z7?=@1iZbwwPGIY_O3aDu491koj}gKlvorJbN)U51?zxv6XRXU%Xp>1{Ti$#-SVd$~C`=h1No43+ql86A*J9^$({xK6$zGG?5YiP@W}Wy)BZj*?u2ruvnFk5wbGpAC_92!2H6AmYO1i&O9E_1E<YW1ltAvy9>h-HHc&`t_rz6vW+5M<FZA-`703__(@8{3!Cm4t>t<c@ZJc11Bp=ArE_|T%XgT5_VYnuLpYheC^4TV^sRQ1?-%+YMuYRLHwPoqaP)WCYH`L#X52T@o&PZ^yt6OUV-bL11H_XY`fO#L6n`1pvM38xpHExb+2=#~(au}H<jOP7#*o!sF6<rffpMz9IkM)L9``a>2ORRgpVDo=SUW0O+L5eT;Hde{+n9f!3zK9Plq~J_MR--R5Ar3}4C6)e9J$_Z<iY+N9j6OFqe>p$9Q3B8hE1zCRCsT(gw&>L+9kqpsxdW3d`S`G{pK-5c$UUa?=TeaqDJV8SiEu>qQ(}CzX*e1=Quk15kY<4)ENyXvkKPuT9+KT<ncZ3;MAGwDy)DOi<<oEu>L``2EIB%_mQC4W+aG3MT)UOdukYz6teXi2;32PYqRoJ^(?dcHClNCCMgV+#W88*+EHdkRUp!?<z~9FFpqsnNL4(Y+%fccVY{?ysJQ|b;}rnEo49iZn41wYvx4ej%6yCQF)5X?J1fYc;PQgf|H&^kQ*htf!UMiosl*vr{?c#~W&FXlX5dhS7q~*w3KYEy6Fy3*&6cjl1K+%0a_+Fkg9Hj7^C~GhH=<@`W9@jp-Wf{Zon^R@TU!EM_T*X(df5jZ&8iQ+tlSEA#V!tM!jK9UHU<!&2v&4HeYVvpc>GM@XzDc!%`=YGH~?uqpEhXDIQc7G&_i?_V@a1_Jp985y2duX%a^VRAA)2~91d?N=XB|B?i}>{d?6zC%KCfoyM+w;Jya8^SDa%*z+-$HX<Wgk?o+hsa^_s*6<Ru=^OmvfGyKQlfL01kl!_coKTINkMMo>*^$1#2=hA6!gv)GxSQ+t<%w`1ajJ*C%tY~nkx;1#1ruGI(H3+J&lm!NNNcMZI><7zilpaKyHn-2-w@!XqCFIEHy!9SmF;F+^Xcz)W#9-?u1Fja7#f#PXQqs7X9tYjBe#K~w5n_7#0nl^B@xDsDjc~1krWu)pb#`X1c-FTFN6gw$l9P2GLde&i-oX$-&x7)55&{~Mp3%SDKc2_6K0q(Z(z&U(u-s_>1BHW5E~SbVmtO6KsE2JZq^AH75Q`CSmiRw^MePGrs-EF&Oo?+E<(-<F$BrB%>YK(3)|4OY#imBE|1qeRGrpIh!P{V7%N7DkJf)*7rl7~TZCxlIP_AtMc$-aQGU~Ppws|6Wsx?fxZ;`#%x4uMR%JsI7|8#{h%Btrr3^BL|6^=sEpbb0z!}WP>9x;2B8|vsHO9n4Pc|Jhj{}tii2*!z}2=Dor5S#WU+62S5c<_0<h|KK8VzRD1=L;g^w%dgU=<HBxZCdhIQ52!{ro<m^n;n)LvKA}9p6PzObq=CyNcM`Zg<#TYix=0xqUGXifQoX*V}HZw#a)Bp_Zf=y0}Ub)ub-idA-YnH<8ULJesAL|1NVj@5CpzhBbLgx%eDP?C=_U|xw;MVsnXcCAJ%$!Yc{_ljixYyWEofPOOKKcHDF0a6+J2$QPn&x^|t4s>=PX^AX4u8%K+;K(4B?@2D7bI$!oxCOLJq)Stc|+5p{>!L)O+a7!d-q4WB#`7!9^=@`MNRrYu?V1`37)ob|G9)-Y5r$GJ-p=P?jd<VSjO206J{AqRJJgCB-N6?6GZ%#s@J8DaJsZ9rBO+l7~p24s9>U{B{MFe_QQG*ewa!{ARaUrh5MTo<2LiBzxOM^X;ZShXe+Wj=Sqt>uo<L78sC2{lcTF!w)%fdz37!*lp{jXhhd0H>FSmQ!7~*lkf3nYB<u%@C(zjkQ;gEaNWy>r+(=ZbGeNB7KoB*k3B*W@L_eCL$LjEM$6pO~EwEX+~umj?ZR5_T->WQ-tfRW>PbAY5`=-<|UMPU?Z)4D<N8Au1Yra6=jQWRxW5^sZR5HHV<P;68G<ao-*f|<Fis9EHma*XkT{=eUq*gS(GAMfhH?BL`_z%97}D#rimUJWp7r)A|sB6@Z&;Jv^BjT`&%Uw&qcJ3u&ZGX5lx4SZcSET_F|VT80=+dD9?}AQfJ@vlUa!8RYUJGVl~loZT(}wem#5(&}-g6=1fA9Ay4mDK3KO7NnLib$yM%GY%jwl-%9', c1='25f3c91646666692', c2='5641a411a5d39569'):
    try:

        if hashlib.sha256(data.encode()).hexdigest()[:16] != c1:
            raise ValueError('Primary integrity check failed')
            

        stage1 = base64.b85decode(data)
        if hashlib.blake2b(stage1).hexdigest()[:16] != c2:
            raise ValueError('Secondary integrity check failed')
            
        stage2 = custom_decode(stage1)
        stage3 = zlib.decompress(stage2)
        return marshal.loads(stage3)
    except Exception as e:
        raise RuntimeError(f'Decryption failed: {str(e)}')


exec(decrypt())
